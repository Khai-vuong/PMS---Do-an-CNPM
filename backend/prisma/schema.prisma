// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// @relation (name: "ManagerProjects", fields: [pid], references: [uid])

model User {
  uid          String   @id @default(dbgenerated("substring(gen_random_uuid()::text, 1, 6)")) @db.Char(6)
  username     String   @unique
  password     String
  google_id    String?
  email        String
  mails        String[] @default([])
  login_method String   @default("LOCAL") // Could be an enum (e.g., "GOOGLE", "LOCAL")

  //Relationships
  managed_projects Project[]      @relation("ManagerProjects")
  project_ids      Project[]      @relation("MemberProjects")
  files            File[]
  tasks            Task[] //May not be used
  MergeRequest     MergeRequest[]
  MergeRequest     MergeRequest[]
}

model Project {
  pid          String   @id @default(dbgenerated("substring(gen_random_uuid()::text, 1, 6)")) @db.Char(6)
  name         String
  description  String
  model        String // This could be an enum depending on your model structure
  phase        String
  created_time DateTime @default(now())

  //Relationships
  tasks       Task[]
  files       File[]
  manager_ids User[] @relation("ManagerProjects")
  members     User[] @relation("MemberProjects")
}

model Task {
  tid          String   @id @default(dbgenerated("substring(gen_random_uuid()::text, 1, 6)")) @db.Char(6)
  name         String
  description  String
  status       String   @default("Undone") //Enum: Undone, Pending, Accepted, Rejected
  comment      String?
  created_time DateTime @default(now())
  due          DateTime @default(dbgenerated("(now() + interval '7 days')::timestamp"))

  //Relationships
  files        File[]
  project      Project        @relation(fields: [project_pid], references: [pid])
  project_pid  String
  assignee     User           @relation(fields: [assignee_id], references: [uid])
  assignee_id  String
  MergeRequest MergeRequest[]
}

model File {
  fid           String   @id @default(dbgenerated("substring(gen_random_uuid()::text, 1, 6)")) @db.Char(6)
  name          String
  extention     String
  size          String
  path          String
  uploaded_time DateTime @default(now())

  //Relationships
  project          Project       @relation(fields: [project_pid], references: [pid])
  project_pid      String
  task             Task          @relation(fields: [task_tid], references: [tid])
  task_tid         String
  uploader         User          @relation(fields: [uploader_id], references: [uid])
  uploader_id      String
  MergeRequest     MergeRequest? @relation(fields: [mergeRequestMrid], references: [mrid])
  mergeRequestMrid String?       @db.Char(6)
}

model MergeRequest {
  mrid       String   @id @default(dbgenerated("substring(gen_random_uuid()::text, 1, 6)")) @db.Char(6)
  comment    String?
  status     String   @default("Pending") //Enum: Pending, Approved, Rejected
  created_at DateTime @default(now())

  // Relationships
  files        File[] // fid - n
  sender       User   @relation("Sender", fields: [sender_uid], references: [uid]) // sender - 1
  sender_uid   String
  approver     User   @relation("Approver", fields: [approver_uid], references: [uid]) // approver - 1
  approver_uid String
  task         Task   @relation(fields: [tid], references: [tid]) // task - 1
  tid          String
  Mail         Mail[]
}

model Mail {
  mid        String   @id @default(dbgenerated("substring(gen_random_uuid()::text, 1, 6)")) @db.Char(6)
  content    String
  category   String   @default("Authorization") //Enum: Authorization, MergeRequest
  created_at DateTime @default(now())

  // Relationships
  merge_request MergeRequest @relation(fields: [mrid], references: [mrid]) // mrid - 1
  mrid          String
}

//What I've learnt
//1. On mapping, the rule is the same on textbook, the 1-N relationship is mapped on the N side
//2. For the N-M relationship, the mapping is done on the junction table
//  if the relationship doesn;t have personal attributes, it can be done implicitly
